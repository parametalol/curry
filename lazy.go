// Code generated by curry generator; DO NOT EDIT.
package curry

// region 1

// Lazy1R converts function parameters to thunk functions.
func Lazy1R[T0, R any](fn func(T0) R) func(func() T0) R {
	return func(arg0 func() T0) R {
		return fn(arg0())
	}
}

// Lazy1 converts function parameters to thunk functions.
func Lazy1[T0 any](fn func(T0)) func(func() T0) {
	return func(arg0 func() T0) {
		fn(arg0())
	}
}

// Lazy1R2 converts function parameters to thunk functions.
func Lazy1R2[T0, R0, R1 any](fn func(T0) (R0, R1)) func(func() T0) (R0, R1) {
	return func(arg0 func() T0) (R0, R1) {
		return fn(arg0())
	}
}

// Lazy1SR converts function parameters to thunk functions.
func Lazy1SR[T0, R any](fn func(...T0) R) func(func() []T0) R {
	return func(arg0 func() []T0) R {
		return fn(arg0()...)
	}
}

// Lazy1S converts function parameters to thunk functions.
func Lazy1S[T0 any](fn func(...T0)) func(func() []T0) {
	return func(arg0 func() []T0) {
		fn(arg0()...)
	}
}

// Lazy1SR2 converts function parameters to thunk functions.
func Lazy1SR2[T0, R0, R1 any](fn func(...T0) (R0, R1)) func(func() []T0) (R0, R1) {
	return func(arg0 func() []T0) (R0, R1) {
		return fn(arg0()...)
	}
}

// region 2

// Lazy2R converts function parameters to thunk functions.
func Lazy2R[T0, T1, R any](fn func(T0, T1) R) func(func() T0, func() T1) R {
	return func(arg0 func() T0, arg1 func() T1) R {
		return fn(arg0(), arg1())
	}
}

// Lazy2 converts function parameters to thunk functions.
func Lazy2[T0, T1 any](fn func(T0, T1)) func(func() T0, func() T1) {
	return func(arg0 func() T0, arg1 func() T1) {
		fn(arg0(), arg1())
	}
}

// Lazy2R2 converts function parameters to thunk functions.
func Lazy2R2[T0, T1, R0, R1 any](fn func(T0, T1) (R0, R1)) func(func() T0, func() T1) (R0, R1) {
	return func(arg0 func() T0, arg1 func() T1) (R0, R1) {
		return fn(arg0(), arg1())
	}
}

// Lazy2SR converts function parameters to thunk functions.
func Lazy2SR[T0, T1, R any](fn func(T0, ...T1) R) func(func() T0, func() []T1) R {
	return func(arg0 func() T0, arg1 func() []T1) R {
		return fn(arg0(), arg1()...)
	}
}

// Lazy2S converts function parameters to thunk functions.
func Lazy2S[T0, T1 any](fn func(T0, ...T1)) func(func() T0, func() []T1) {
	return func(arg0 func() T0, arg1 func() []T1) {
		fn(arg0(), arg1()...)
	}
}

// Lazy2SR2 converts function parameters to thunk functions.
func Lazy2SR2[T0, T1, R0, R1 any](fn func(T0, ...T1) (R0, R1)) func(func() T0, func() []T1) (R0, R1) {
	return func(arg0 func() T0, arg1 func() []T1) (R0, R1) {
		return fn(arg0(), arg1()...)
	}
}

// region 3

// Lazy3R converts function parameters to thunk functions.
func Lazy3R[T0, T1, T2, R any](fn func(T0, T1, T2) R) func(func() T0, func() T1, func() T2) R {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2) R {
		return fn(arg0(), arg1(), arg2())
	}
}

// Lazy3 converts function parameters to thunk functions.
func Lazy3[T0, T1, T2 any](fn func(T0, T1, T2)) func(func() T0, func() T1, func() T2) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2) {
		fn(arg0(), arg1(), arg2())
	}
}

// Lazy3R2 converts function parameters to thunk functions.
func Lazy3R2[T0, T1, T2, R0, R1 any](fn func(T0, T1, T2) (R0, R1)) func(func() T0, func() T1, func() T2) (R0, R1) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2) (R0, R1) {
		return fn(arg0(), arg1(), arg2())
	}
}

// Lazy3SR converts function parameters to thunk functions.
func Lazy3SR[T0, T1, T2, R any](fn func(T0, T1, ...T2) R) func(func() T0, func() T1, func() []T2) R {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() []T2) R {
		return fn(arg0(), arg1(), arg2()...)
	}
}

// Lazy3S converts function parameters to thunk functions.
func Lazy3S[T0, T1, T2 any](fn func(T0, T1, ...T2)) func(func() T0, func() T1, func() []T2) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() []T2) {
		fn(arg0(), arg1(), arg2()...)
	}
}

// Lazy3SR2 converts function parameters to thunk functions.
func Lazy3SR2[T0, T1, T2, R0, R1 any](fn func(T0, T1, ...T2) (R0, R1)) func(func() T0, func() T1, func() []T2) (R0, R1) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() []T2) (R0, R1) {
		return fn(arg0(), arg1(), arg2()...)
	}
}

// region 4

// Lazy4R converts function parameters to thunk functions.
func Lazy4R[T0, T1, T2, T3, R any](fn func(T0, T1, T2, T3) R) func(func() T0, func() T1, func() T2, func() T3) R {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3) R {
		return fn(arg0(), arg1(), arg2(), arg3())
	}
}

// Lazy4 converts function parameters to thunk functions.
func Lazy4[T0, T1, T2, T3 any](fn func(T0, T1, T2, T3)) func(func() T0, func() T1, func() T2, func() T3) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3) {
		fn(arg0(), arg1(), arg2(), arg3())
	}
}

// Lazy4R2 converts function parameters to thunk functions.
func Lazy4R2[T0, T1, T2, T3, R0, R1 any](fn func(T0, T1, T2, T3) (R0, R1)) func(func() T0, func() T1, func() T2, func() T3) (R0, R1) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3) (R0, R1) {
		return fn(arg0(), arg1(), arg2(), arg3())
	}
}

// Lazy4SR converts function parameters to thunk functions.
func Lazy4SR[T0, T1, T2, T3, R any](fn func(T0, T1, T2, ...T3) R) func(func() T0, func() T1, func() T2, func() []T3) R {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() []T3) R {
		return fn(arg0(), arg1(), arg2(), arg3()...)
	}
}

// Lazy4S converts function parameters to thunk functions.
func Lazy4S[T0, T1, T2, T3 any](fn func(T0, T1, T2, ...T3)) func(func() T0, func() T1, func() T2, func() []T3) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() []T3) {
		fn(arg0(), arg1(), arg2(), arg3()...)
	}
}

// Lazy4SR2 converts function parameters to thunk functions.
func Lazy4SR2[T0, T1, T2, T3, R0, R1 any](fn func(T0, T1, T2, ...T3) (R0, R1)) func(func() T0, func() T1, func() T2, func() []T3) (R0, R1) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() []T3) (R0, R1) {
		return fn(arg0(), arg1(), arg2(), arg3()...)
	}
}

// region 5

// Lazy5R converts function parameters to thunk functions.
func Lazy5R[T0, T1, T2, T3, T4, R any](fn func(T0, T1, T2, T3, T4) R) func(func() T0, func() T1, func() T2, func() T3, func() T4) R {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3, arg4 func() T4) R {
		return fn(arg0(), arg1(), arg2(), arg3(), arg4())
	}
}

// Lazy5 converts function parameters to thunk functions.
func Lazy5[T0, T1, T2, T3, T4 any](fn func(T0, T1, T2, T3, T4)) func(func() T0, func() T1, func() T2, func() T3, func() T4) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3, arg4 func() T4) {
		fn(arg0(), arg1(), arg2(), arg3(), arg4())
	}
}

// Lazy5R2 converts function parameters to thunk functions.
func Lazy5R2[T0, T1, T2, T3, T4, R0, R1 any](fn func(T0, T1, T2, T3, T4) (R0, R1)) func(func() T0, func() T1, func() T2, func() T3, func() T4) (R0, R1) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3, arg4 func() T4) (R0, R1) {
		return fn(arg0(), arg1(), arg2(), arg3(), arg4())
	}
}

// Lazy5SR converts function parameters to thunk functions.
func Lazy5SR[T0, T1, T2, T3, T4, R any](fn func(T0, T1, T2, T3, ...T4) R) func(func() T0, func() T1, func() T2, func() T3, func() []T4) R {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3, arg4 func() []T4) R {
		return fn(arg0(), arg1(), arg2(), arg3(), arg4()...)
	}
}

// Lazy5S converts function parameters to thunk functions.
func Lazy5S[T0, T1, T2, T3, T4 any](fn func(T0, T1, T2, T3, ...T4)) func(func() T0, func() T1, func() T2, func() T3, func() []T4) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3, arg4 func() []T4) {
		fn(arg0(), arg1(), arg2(), arg3(), arg4()...)
	}
}

// Lazy5SR2 converts function parameters to thunk functions.
func Lazy5SR2[T0, T1, T2, T3, T4, R0, R1 any](fn func(T0, T1, T2, T3, ...T4) (R0, R1)) func(func() T0, func() T1, func() T2, func() T3, func() []T4) (R0, R1) {
	return func(arg0 func() T0, arg1 func() T1, arg2 func() T2, arg3 func() T3, arg4 func() []T4) (R0, R1) {
		return fn(arg0(), arg1(), arg2(), arg3(), arg4()...)
	}
}

package main

import (
	_ "embed"
	"fmt"
	"os"
	"slices"
	"strconv"
	"text/template"
)

type Arg struct {
	I    int
	Name string
}

func main() {
	if len(os.Args) != 3 {
		fmt.Fprintln(os.Stderr, "usage: go run generators <template> <num_params>")
		os.Exit(1)
	}
	name := os.Args[1]
	n, err := strconv.Atoi(os.Args[2])
	if err != nil || n < 1 {
		fmt.Fprintln(os.Stderr, "num_params must be a positive integer")
		os.Exit(1)
	}
	n++
	args := make([]Arg, n)
	for i := range n {
		args[i].I = i
		args[i].Name = fmt.Sprint("arg", i)
	}
	rargs := slices.Clone(args)
	slices.Reverse(rargs)
	tmpl := template.Must(template.ParseFiles(
		"generator/templates/"+name+".go.tpl",
		"generator/templates/common.go.tpl",
	))

	file, err := os.Create(fmt.Sprintf("%s.go", name))
	if err != nil {
		panic(err)
	}
	_, _ = file.WriteString(`// Code generated by curry generator; DO NOT EDIT.
package curry
`)
	defer file.Close()
	for i := range n - 1 {
		tmpl.Execute(file, map[string]any{
			"N":     i + 1,
			"Last":  i,
			"Args":  args[0 : i+1],
			"RArgs": rargs[n-i-1 : n],
		})
	}
}
